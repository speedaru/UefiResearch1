#
# DO NOT EDIT
# This file is auto-generated by build utility
#
# Module Name:
#
#   Makefile
#
# Abstract:
#
#   Auto-generated makefile for building modules, libraries or platform
#
    

#
# Platform Macro Definition
#
PLATFORM_NAME = UefiResearch1
PLATFORM_GUID = DEADBEEF-1234-5678-9ABC-DEF012345678
PLATFORM_VERSION = 0.1
PLATFORM_RELATIVE_DIR = UefiResearch1
PLATFORM_DIR = F:\coding\EFI_stuff\efi_spoofer_for_github\UefiResearch1
PLATFORM_OUTPUT_DIR = Build\UefiResearch1

#
# Module Macro Definition
#
MODULE_NAME = UefiResearch1
MODULE_GUID = 12345678-1234-1234-1234-123456789ABC
MODULE_NAME_GUID = UefiResearch1
MODULE_VERSION = 0.0
MODULE_TYPE = UEFI_APPLICATION
MODULE_FILE = UefiResearch1.inf
MODULE_FILE_BASE_NAME = UefiResearch1
BASE_NAME = $(MODULE_NAME)
MODULE_RELATIVE_DIR = UefiResearch1
PACKAGE_RELATIVE_DIR = UefiResearch1
MODULE_DIR = F:\coding\EFI_stuff\efi_spoofer_for_github\UefiResearch1
FFS_OUTPUT_DIR = 

MODULE_ENTRY_POINT = UefiMain
ARCH_ENTRY_POINT = UefiMain
IMAGE_ENTRY_POINT = _ModuleEntryPoint

INF_VERSION = 0x00010005
BASE_NAME = UefiResearch1
FILE_GUID = 12345678-1234-1234-1234-123456789ABC
MODULE_TYPE = UEFI_APPLICATION

#
# Build Configuration Macro Definition
#
ARCH = X64
TOOLCHAIN = VS2022
TOOLCHAIN_TAG = VS2022
TARGET = RELEASE

#
# Build Directory Macro Definition
#
# PLATFORM_BUILD_DIR = F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022
BUILD_DIR = F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022
BIN_DIR = $(BUILD_DIR)\X64
LIB_DIR = $(BIN_DIR)
MODULE_BUILD_DIR = F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1
OUTPUT_DIR = F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT
DEBUG_DIR = F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\DEBUG
DEST_DIR_OUTPUT = $(OUTPUT_DIR)
DEST_DIR_DEBUG = $(DEBUG_DIR)

#
# Shell Command Macro
#
CP = copy /y
MV = move /y
RM = del /f /q
MD = mkdir
RD = rmdir /s /q


#
# Tools definitions specific to this module
#
APP_FLAGS = /nologo /E /TC
APP = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x64\cl.exe

ASL_FLAGS = 
ASL_OUTFLAGS =  -p
ASL = C:\ASL\iasl.exe

ASLCC_FLAGS = /nologo /c /FIAutoGen.h /TC /Dmain=ReferenceAcpiTable
ASLCC = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x64\cl.exe

ASLDLINK_FLAGS = /NODEFAULTLIB /ENTRY:ReferenceAcpiTable /SUBSYSTEM:CONSOLE
ASLDLINK = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x64\link.exe

ASLPP_FLAGS = /nologo /E /C /FIAutoGen.h
ASLPP = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x64\cl.exe

ASM_FLAGS = /nologo /c /WX /W3 /Cx /Zd
ASM = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x64\ml64.exe

ASM16 = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x86\ml.exe

ASMLINK_FLAGS = /nologo /tiny
ASMLINK = C:\WINDDK\3790.1830\bin\bin16\link16.exe

BROTLI_GUID =  3D532050-5CDA-4FD0-879E-0F7F630D5AFB
BROTLI = BrotliCompress

CC_FLAGS = /nologo /c /WX /GS /W4 /Gs32768 /D UNICODE /O1b2s /GL /Gy /FIAutoGen.h /EHs-c- /GR- /GF /Gw /volatileMetadata-
CC = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x64\cl.exe

CRC32_GUID =  FC1BCDB0-7D31-49AA-936A-A4600D9DD083
CRC32 = GenCrc32

DEPS_FLAGS = /showIncludes

DLINK_FLAGS = /NOLOGO /NODEFAULTLIB /IGNORE:4001 /IGNORE:4281 /IGNORE:4254 /OPT:REF /OPT:ICF=10 /MAP /ALIGN:32 /SECTION:.xdata,D /SECTION:.pdata,D /Machine:X64 /LTCG /DLL /ENTRY:$(IMAGE_ENTRY_POINT) /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER /SAFESEH:NO /BASE:0 /DRIVER /MERGE:.rdata=.data /ALIGN:4096 /DLL /WX /IGNORE:4210
DLINK = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x64\link.exe
DLINK_XIPFLAGS =  /ALIGN:32

DLINK2_FLAGS = /WHOLEARCHIVE

DTC_FLAGS = -H epapr
DTC = dtc

DTCPP = cpp

GENFW_FLAGS = 
GENFW = GenFw

LZMA_GUID =  EE4E5898-3914-4259-9D6E-DC7BD79403CF
LZMA = LzmaCompress

LZMAF86_GUID =  D42AE6BD-1352-4bfb-909A-CA72A6EAE889
LZMAF86 = LzmaF86Compress

MAKE = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x86\nmake.exe

NASM_FLAGS = -Ox -f win64
NASM = C:\nasm\nasm

NASMB_FLAGS = -f bin

OBJCOPY_ADDDEBUGFLAG =  
OBJCOPY_FLAGS = objcopy not needed for
OBJCOPY = echo
OBJCOPY_STRIPFLAG =  --strip-unneeded -R .eh_frame

OPTROM_FLAGS = -e
OPTROM = EfiRom

PKCS7SIGN_GUID =  4AAFD29D-68DF-49EE-8AA9-347D375665A7
PKCS7SIGN = Pkcs7Sign

PP_FLAGS = /nologo /E /TC /FIAutoGen.h
PP = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x64\cl.exe

RC = C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x86\rc.exe

RSA2048SHA256SIGN_GUID =  A7717414-C616-4977-9420-844712A735BF
RSA2048SHA256SIGN = Rsa2048Sha256Sign

SLINK_FLAGS = /NOLOGO /LTCG
SLINK = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x64\lib.exe

SYMRENAME_FLAGS = Symbol renaming not needed for
SYMRENAME = echo

TIANO_GUID =  A31280AD-481E-41B6-95E8-127F4C984779
TIANO = TianoCompress

VFR_FLAGS = -l -n
VFR = VfrCompile

VFRPP_FLAGS = /nologo /E /TC /DVFRCOMPILE /FI$(MODULE_NAME)StrDefs.h
VFRPP = C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x64\cl.exe

VPDTOOL_GUID =  8C3D856A-9BE6-468E-850A-24F7A8D38E08
VPDTOOL = BPDG

cc_resp_2 = @F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\cc_resp_2.txt
cc_resp_7 = @F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\cc_resp_7.txt
cc_resp_8 = @F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\cc_resp_8.txt

MAKE_FILE = $(MODULE_BUILD_DIR)\Makefile

#
# Build Macro
#
STATIC_LIBRARY_FILES =  \
    $(BIN_DIR)\MdePkg\Library\BaseDebugPrintErrorLevelLib\BaseDebugPrintErrorLevelLib\OUTPUT\BaseDebugPrintErrorLevelLib.lib \
    $(BIN_DIR)\MdePkg\Library\BaseLib\BaseLib\OUTPUT\BaseLib.lib \
    $(BIN_DIR)\MdePkg\Library\BaseMemoryLib\BaseMemoryLib\OUTPUT\BaseMemoryLib.lib \
    $(BIN_DIR)\MdePkg\Library\BasePcdLibNull\BasePcdLibNull\OUTPUT\BasePcdLibNull.lib \
    $(BIN_DIR)\MdePkg\Library\BasePrintLib\BasePrintLib\OUTPUT\BasePrintLib.lib \
    $(BIN_DIR)\MdePkg\Library\RegisterFilterLibNull\RegisterFilterLibNull\OUTPUT\FilterLibNull.lib \
    $(BIN_DIR)\MdePkg\Library\StackCheckLibNull\StackCheckLibNull\OUTPUT\StackCheckLibNull.lib \
    $(BIN_DIR)\MdePkg\Library\UefiApplicationEntryPoint\UefiApplicationEntryPoint\OUTPUT\UefiApplicationEntryPoint.lib \
    $(BIN_DIR)\MdePkg\Library\UefiBootServicesTableLib\UefiBootServicesTableLib\OUTPUT\UefiBootServicesTableLib.lib \
    $(BIN_DIR)\MdePkg\Library\UefiDebugLibConOut\UefiDebugLibConOut\OUTPUT\UefiDebugLibConOut.lib \
    $(BIN_DIR)\MdePkg\Library\UefiDevicePathLib\UefiDevicePathLib\OUTPUT\UefiDevicePathLib.lib \
    $(BIN_DIR)\MdePkg\Library\UefiLib\UefiLib\OUTPUT\UefiLib.lib \
    $(BIN_DIR)\MdePkg\Library\UefiMemoryAllocationLib\UefiMemoryAllocationLib\OUTPUT\UefiMemoryAllocationLib.lib \
    $(BIN_DIR)\MdePkg\Library\UefiRuntimeServicesTableLib\UefiRuntimeServicesTableLib\OUTPUT\UefiRuntimeServicesTableLib.lib \
    $(OUTPUT_DIR)\UefiResearch1.lib

OBJECT_FILES =  \
    $(OUTPUT_DIR)\AutoGen.obj \
    $(OUTPUT_DIR)\crypto\sha256.obj \
    $(OUTPUT_DIR)\crypto\xor_str.obj \
    $(OUTPUT_DIR)\crypto\xxtea.obj \
    $(OUTPUT_DIR)\main.obj \
    $(OUTPUT_DIR)\structs\string.obj \
    $(OUTPUT_DIR)\utils\filesystem.obj \
    $(OUTPUT_DIR)\utils\parser.obj \
    $(OUTPUT_DIR)\utils\str_ext.obj

INC =  \
    /I$(WORKSPACE)\UefiResearch1\crypto \
    /I$(WORKSPACE)\UefiResearch1\structs \
    /I$(WORKSPACE)\UefiResearch1\utils \
    /I$(WORKSPACE)\UefiResearch1 \
    /I$(DEBUG_DIR) \
    /I$(WORKSPACE)\MdePkg \
    /I$(WORKSPACE)\MdePkg\Include \
    /I$(WORKSPACE)\MdePkg\Test\UnitTest\Include \
    /I$(WORKSPACE)\MdePkg\Test\Mock\Include \
    /I$(WORKSPACE)\MdePkg\Library\MipiSysTLib\mipisyst\library\include \
    /I$(WORKSPACE)\MdePkg\Include\X64

STATIC_LIBRARY_FILES_LIST = F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\static_library_files.lst
OBJECT_FILES_LIST = F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\object_files.lst
OBJLIST_0 = $(OUTPUT_DIR)\AutoGen.obj $(OUTPUT_DIR)\main.obj
OBJLIST_1 = $(OUTPUT_DIR)\utils\filesystem.obj $(OUTPUT_DIR)\utils\str_ext.obj $(OUTPUT_DIR)\utils\parser.obj
OBJLIST_2 = $(OUTPUT_DIR)\crypto\xxtea.obj $(OUTPUT_DIR)\crypto\xor_str.obj $(OUTPUT_DIR)\crypto\sha256.obj
OBJLIST_3 = $(OUTPUT_DIR)\structs\string.obj


#
# Overridable Target Macro Definitions
#
FORCE_REBUILD = force_build
INIT_TARGET = init
PCH_TARGET =
BC_TARGET = 
CODA_TARGET = F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\UefiResearch1.efi \
              

#
# Default target, which will build dependent libraries in addition to source files
#

all: mbuild


#
# Target used when called from platform makefile, which will bypass the build of dependent libraries
#

pbuild: $(INIT_TARGET) $(BC_TARGET) $(PCH_TARGET) $(CODA_TARGET)

#
# ModuleTarget
#

mbuild: $(INIT_TARGET) $(BC_TARGET) gen_libs $(PCH_TARGET) $(CODA_TARGET)

#
# Build Target used in multi-thread build mode, which will bypass the init and gen_libs targets
#

tbuild: $(BC_TARGET) $(PCH_TARGET) $(CODA_TARGET)

#
# Phony target which is used to force executing commands for a target
#
force_build:
	-@

#
# Target to update the FD
#

fds: mbuild gen_fds

#
# Initialization target: print build information and create necessary directories
#
init: info dirs

info:
	-@echo Building ... $(MODULE_DIR)\$(MODULE_FILE) [$(ARCH)]

dirs:
	-@if not exist $(DEBUG_DIR) $(MD) $(DEBUG_DIR)
	-@if not exist $(OUTPUT_DIR) $(MD) $(OUTPUT_DIR)


strdefs:
	-@$(CP) $(DEBUG_DIR)\AutoGen.h $(DEBUG_DIR)\$(MODULE_NAME)StrDefs.h

#
# GenLibsTarget
#
gen_libs:
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\RegisterFilterLibNull\RegisterFilterLibNull\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseLib\BaseLib\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseMemoryLib\BaseMemoryLib\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BasePcdLibNull\BasePcdLibNull\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseDebugPrintErrorLevelLib\BaseDebugPrintErrorLevelLib\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BasePrintLib\BasePrintLib\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiDebugLibConOut\UefiDebugLibConOut\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiBootServicesTableLib\UefiBootServicesTableLib\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiMemoryAllocationLib\UefiMemoryAllocationLib\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\StackCheckLibNull\StackCheckLibNull\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiRuntimeServicesTableLib\UefiRuntimeServicesTableLib\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiDevicePathLib\UefiDevicePathLib\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiApplicationEntryPoint\UefiApplicationEntryPoint\Makefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiLib\UefiLib\Makefile
	@cd $(MODULE_BUILD_DIR)

#
# Build Flash Device Image
#
gen_fds:
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BUILD_DIR)\Makefile fds
	@cd $(MODULE_BUILD_DIR)

!INCLUDE $(MODULE_BUILD_DIR)\dependency
!INCLUDE $(MODULE_BUILD_DIR)\deps_target

#
# Individual Object Build Targets
#
$(DEBUG_DIR)\UefiResearch1.dll : $(MAKE_FILE)
$(DEBUG_DIR)\UefiResearch1.dll : $(STATIC_LIBRARY_FILES)
$(DEBUG_DIR)\UefiResearch1.dll : $(STATIC_LIBRARY_FILES_LIST)
	"$(DLINK)" /OUT:F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\DEBUG\UefiResearch1.dll.wtemp $(DLINK_FLAGS) $(DLINK2_FLAGS) $(DLINK_SPATH) @$(STATIC_LIBRARY_FILES_LIST)
	$(RM) F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\DEBUG\UefiResearch1.dll.wtemp
	"$(DLINK)" /OUT:F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\DEBUG\UefiResearch1.dll $(DLINK_FLAGS) $(DLINK_SPATH) @$(STATIC_LIBRARY_FILES_LIST)

$(OUTPUT_DIR)\UefiResearch1.efi : $(DEBUG_DIR)\UefiResearch1.dll
	"$(GENFW)" -e $(MODULE_TYPE) -o F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\UefiResearch1.efi F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\DEBUG\UefiResearch1.dll $(GENFW_FLAGS)
	$(CP) F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\UefiResearch1.efi $(DEBUG_DIR)
	$(CP) F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\UefiResearch1.efi $(BIN_DIR)\$(MODULE_NAME_GUID).efi
	-$(CP) $(DEBUG_DIR)\*.map $(OUTPUT_DIR)
	-$(CP) $(DEBUG_DIR)\*.pdb $(OUTPUT_DIR)

$(OUTPUT_DIR)\UefiResearch1.map : $(OUTPUT_DIR)\UefiResearch1.efi
	

$(OBJLIST_0):  \
	$(MAKE_FILE) \
	$(DEBUG_DIR)\AutoGen.c \
	$(DEBUG_DIR)\AutoGen.h \
	$(WORKSPACE)\UefiResearch1\main.c
	"$(CC)" /FoF:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\.\ $(DEPS_FLAGS) $(CC_FLAGS) $(INC) $(cc_resp_2)

$(OBJLIST_3):  \
	$(MAKE_FILE) \
	$(WORKSPACE)\UefiResearch1\structs\string.c \
	$(DEBUG_DIR)\AutoGen.h
	"$(CC)" /FoF:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\structs\ $(DEPS_FLAGS) $(CC_FLAGS) $(INC) F:\coding\EFI_stuff\efi_spoofer_for_github\UefiResearch1\structs\string.c

$(OBJLIST_2):  \
	$(MAKE_FILE) \
	$(WORKSPACE)\UefiResearch1\crypto\sha256.c \
	$(DEBUG_DIR)\AutoGen.h \
	$(WORKSPACE)\UefiResearch1\crypto\xor_str.cpp \
	$(WORKSPACE)\UefiResearch1\crypto\xxtea.c
	"$(CC)" /FoF:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\crypto\ $(DEPS_FLAGS) $(CC_FLAGS) $(INC) $(cc_resp_7)

$(OBJLIST_1):  \
	$(MAKE_FILE) \
	$(WORKSPACE)\UefiResearch1\utils\str_ext.c \
	$(DEBUG_DIR)\AutoGen.h \
	$(WORKSPACE)\UefiResearch1\utils\parser.c \
	$(WORKSPACE)\UefiResearch1\utils\filesystem.c
	"$(CC)" /FoF:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\utils\ $(DEPS_FLAGS) $(CC_FLAGS) $(INC) $(cc_resp_8)

$(OUTPUT_DIR)\UefiResearch1.lib : $(OBJECT_FILES)
$(OUTPUT_DIR)\UefiResearch1.lib : $(OBJECT_FILES_LIST)
	"$(SLINK)" $(SLINK_FLAGS) /OUT:F:\coding\EFI_stuff\efi_spoofer_for_github\Build\UefiResearch1\RELEASE_VS2022\X64\UefiResearch1\UefiResearch1\OUTPUT\UefiResearch1.lib @$(OBJECT_FILES_LIST)



#
# clean all intermediate files
#
clean:
	if exist $(OUTPUT_DIR) $(RD) $(OUTPUT_DIR)
		$(RM) AutoGenTimeStamp

#
# clean all generated files
#
cleanall:
	if exist $(DEBUG_DIR) $(RD) $(DEBUG_DIR)
	if exist $(OUTPUT_DIR) $(RD) $(OUTPUT_DIR)
	$(RM) *.pdb *.idb > NUL 2>&1
	$(RM) $(BIN_DIR)\$(MODULE_NAME).efi
	$(RM) AutoGenTimeStamp

#
# clean all dependent libraries built
#
cleanlib:
	-@if exist $(BIN_DIR)\MdePkg\Library\RegisterFilterLibNull\RegisterFilterLibNull\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\RegisterFilterLibNull\RegisterFilterLibNull\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\BaseLib\BaseLib\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseLib\BaseLib\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\BaseMemoryLib\BaseMemoryLib\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseMemoryLib\BaseMemoryLib\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\BasePcdLibNull\BasePcdLibNull\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BasePcdLibNull\BasePcdLibNull\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\BaseDebugPrintErrorLevelLib\BaseDebugPrintErrorLevelLib\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseDebugPrintErrorLevelLib\BaseDebugPrintErrorLevelLib\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\BasePrintLib\BasePrintLib\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BasePrintLib\BasePrintLib\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiDebugLibConOut\UefiDebugLibConOut\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiDebugLibConOut\UefiDebugLibConOut\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiBootServicesTableLib\UefiBootServicesTableLib\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiBootServicesTableLib\UefiBootServicesTableLib\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiMemoryAllocationLib\UefiMemoryAllocationLib\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiMemoryAllocationLib\UefiMemoryAllocationLib\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\StackCheckLibNull\StackCheckLibNull\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\StackCheckLibNull\StackCheckLibNull\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiRuntimeServicesTableLib\UefiRuntimeServicesTableLib\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiRuntimeServicesTableLib\UefiRuntimeServicesTableLib\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiDevicePathLib\UefiDevicePathLib\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiDevicePathLib\UefiDevicePathLib\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiApplicationEntryPoint\UefiApplicationEntryPoint\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiApplicationEntryPoint\UefiApplicationEntryPoint\Makefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiLib\UefiLib\Makefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiLib\UefiLib\Makefile cleanall
	@cd $(MODULE_BUILD_DIR)

